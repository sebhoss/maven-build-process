node {
    stage('Checkout') {
        checkout scm
    }

    stage('Versioning') {
        withMaven(
            maven: 'maven-latest',
            mavenSettingsConfig: 'repository.metio.wtf',
            mavenLocalRepo: '.repository') {
            try {
                def timestamp = new java.text.SimpleDateFormat('yyyy.MM.dd-HHmmss').format(new Date())
                sh "mvn versions:set -DgenerateBackupPoms=false -DnewVersion=${timestamp}"
            } catch (exception) {
                currentBuild.result = 'FAILURE'
            }
        }
    }

    stage('Build & Deploy') {
        withCredentials([
                string(credentialsId: 'pgp.secretkey', variable: 'PGP_KEY'),
                string(credentialsId: 'pgp.passphrase', variable: 'PGP_PASSPHRASE')]) {
            withMaven(
                maven: 'maven-latest',
                mavenSettingsConfig: 'repository.metio.wtf',
                mavenLocalRepo: '.repository') {
                try {
                    sh "git config user.name 'build.metio.wtf'"
                    sh "git config user.email 'build@metio.wtf'"
                    sh("mvn clean pgp:sign deploy scm:tag -Drelease=metio -DpushChanges=false -Dpgp.secretKey=keyfile:${PGP_KEY} -Dpgp.passphrase=literal:'${PGP_PASSPHRASE}'")
                } catch (exception) {
                    currentBuild.result = 'FAILURE'
                }
            }
        }
    }

    stage('Cleanup') {
        dir('.repository') {
            deleteDir()
        }
    }

}
