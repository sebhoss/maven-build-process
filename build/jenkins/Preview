node {

    def repositoryLocation = ".repository"
    def timestamp = new java.text.SimpleDateFormat('yyyy.MM.dd-HHmmss').format(new Date())
    def mavenVersion = "maven-latest"
    def mavenSettings = "repository.metio.wtf"
    def releaseTarget = "metio"
    def skipLocalStaging = "true"

    stage('Cleanup') {
        dir("${repositoryLocation}") {
            deleteDir()
        }
    }

    stage('Checkout') {
        checkout scm
    }

    stage('Versioning') {
        withMaven(
                maven: "${mavenVersion}",
                mavenSettingsConfig: "${mavenSettings}",
                mavenLocalRepo: "${repositoryLocation}") {
            sh """
                mvn --batch-mode \
                    --show-version \
                    versions:set \
                    -DgenerateBackupPoms=false \
                    -DnewVersion=${timestamp}
            """
        }
    }

    stage('Install') {
        withMaven(
                maven: "${mavenVersion}",
                mavenSettingsConfig: "${mavenSettings}",
                mavenLocalRepo: "${repositoryLocation}") {
            sh """
                mvn --batch-mode \
                    --show-version \
                    clean install \
                    -Drelease=${releaseTarget}
            """
        }
    }

    stage('Sign') {
        withCredentials([
                string(credentialsId: 'pgp.secretkey', variable: 'PGP_KEY'),
                string(credentialsId: 'pgp.passphrase', variable: 'PGP_PASSPHRASE')]) {
            withMaven(
                    maven: "${mavenVersion}",
                    mavenSettingsConfig: "${mavenSettings}",
                    mavenLocalRepo: "${repositoryLocation}") {
                sh """
                    mvn --batch-mode \
                        --show-version \
                        pgp:sign \
                        -Dpgp.secretKey=keyfile:${PGP_KEY} \
                        -Dpgp.passphrase=literal:'${PGP_PASSPHRASE}'
                """
            }
        }
    }

    stage('Analyze') {
        withSonarQubeEnv('quality.metio.wtf') {
            withMaven(
                    maven: "${mavenVersion}",
                    mavenSettingsConfig: "${mavenSettings}",
                    mavenLocalRepo: "${repositoryLocation}") {
                sh """
                    mvn --batch-mode \
                        --show-version \
                        sonar:sonar
                """
            }
        }
    }

    stage('Deploy') {
        configFileProvider([configFile(fileId: "${mavenSettings}", variable: 'MAVEN_SETTINGS')]) {
            withMaven(
                    maven: "${mavenVersion}",
                    mavenLocalRepo: "${repositoryLocation}") {
                sh """
                    mvn --batch-mode \
                        --settings $MAVEN_SETTINGS \
                        --show-version \
                        nexus-staging:deploy \
                        -Drelease=${releaseTarget} \
                        -DskipLocalStaging=${skipLocalStaging}
                """
            }
        }
    }

}
