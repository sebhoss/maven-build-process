node {
    stage('Checkout') {
        checkout scm
    }

    stage('Versioning') {
        withMaven(
            maven: 'maven-latest',
            mavenSettingsConfig: 'repository.metio.wtf',
            mavenLocalRepo: '.repository') {
            try {
                def timestamp = new java.text.SimpleDateFormat('yyyy.MM.dd-HHmmss').format(new Date())
                sh "mvn versions:set -DgenerateBackupPoms=false -DnewVersion=${timestamp}"
            } catch (exception) {
                currentBuild.result = 'FAILURE'
                throw exception
            }
        }
    }

    stage('Build & Deploy') {
        withMaven(
            maven: 'maven-latest',
            mavenSettingsConfig: 'repository.metio.wtf',
            mavenLocalRepo: '.repository') {
            try {
                withCredentials([string(credentialsId: 'pgp.secretkey', variable: 'pgp_key'), string(credentialsId: 'pgp.passphrase', variable: 'pgp_passphrase')]) {
                    sh "mvn clean pgp:sign deploy scm:tag -Drelease=sonatype -DpushChanges=false -Dpgp.secretKey=${pgp_key} -Dpgp.passphrase=${pgp_passphrase}"
                }
            } catch (exception) {
                currentBuild.result = 'FAILURE'
            }
        }
    }

    stage('Cleanup') {
        dir('.repository') {
            deleteDir()
        }
    }

}
